//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ifrsEntities : DbContext
    {
        public ifrsEntities()
            : base("name=ifrsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_retail_pd> C_retail_pd { get; set; }
        public virtual DbSet<ConsolidatedLGDCalculated> ConsolidatedLGDCalculateds { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<LGD_CostInput> LGD_CostInput { get; set; }
        public virtual DbSet<LGD_General_Input> LGD_General_Input { get; set; }
        public virtual DbSet<LGD_Output> LGD_Output { get; set; }
        public virtual DbSet<LGD_RecoveryInput> LGD_RecoveryInput { get; set; }
        public virtual DbSet<OutPut> OutPuts { get; set; }
        public virtual DbSet<OutputLGD> OutputLGDs { get; set; }
        public virtual DbSet<PDLoan> PDLoans { get; set; }
        public virtual DbSet<Phase2> Phase2 { get; set; }
        public virtual DbSet<RecoveryOutputLGD> RecoveryOutputLGDs { get; set; }
        public virtual DbSet<RetailsPD> RetailsPDs { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<ForwordLooking_PD> ForwordLooking_PD { get; set; }
        public virtual DbSet<RatedPDLogit> RatedPDLogits { get; set; }
        public virtual DbSet<ForwordFile> ForwordFiles { get; set; }
        public virtual DbSet<CostOutput> CostOutputs { get; set; }
        public virtual DbSet<UserRun> UserRuns { get; set; }
        public virtual DbSet<Comprehensive_Report> Comprehensive_Report { get; set; }
        public virtual DbSet<User_log> User_log { get; set; }
        public virtual DbSet<User_sessions> User_sessions { get; set; }
        public virtual DbSet<ECL_GeneralInput> ECL_GeneralInput { get; set; }
        public virtual DbSet<External_Ratings> External_Ratings { get; set; }
    
        public virtual int Ecl_Calculation(Nullable<int> totalPayments, Nullable<double> year_value, Nullable<double> pf, Nullable<double> eAD_Total, Nullable<double> eAD_data, Nullable<double> int_rate, Nullable<double> eIR, Nullable<int> month_to_add, string facilityID, string stage, Nullable<System.DateTime> assessmentDate, Nullable<System.DateTime> maturityDate, Nullable<double> basePD, Nullable<double> positivePDBest, Nullable<double> negativePDWorst, Nullable<double> lGDDefault, string user)
        {
            var totalPaymentsParameter = totalPayments.HasValue ?
                new ObjectParameter("totalPayments", totalPayments) :
                new ObjectParameter("totalPayments", typeof(int));
    
            var year_valueParameter = year_value.HasValue ?
                new ObjectParameter("year_value", year_value) :
                new ObjectParameter("year_value", typeof(double));
    
            var pfParameter = pf.HasValue ?
                new ObjectParameter("pf", pf) :
                new ObjectParameter("pf", typeof(double));
    
            var eAD_TotalParameter = eAD_Total.HasValue ?
                new ObjectParameter("EAD_Total", eAD_Total) :
                new ObjectParameter("EAD_Total", typeof(double));
    
            var eAD_dataParameter = eAD_data.HasValue ?
                new ObjectParameter("EAD_data", eAD_data) :
                new ObjectParameter("EAD_data", typeof(double));
    
            var int_rateParameter = int_rate.HasValue ?
                new ObjectParameter("int_rate", int_rate) :
                new ObjectParameter("int_rate", typeof(double));
    
            var eIRParameter = eIR.HasValue ?
                new ObjectParameter("EIR", eIR) :
                new ObjectParameter("EIR", typeof(double));
    
            var month_to_addParameter = month_to_add.HasValue ?
                new ObjectParameter("month_to_add", month_to_add) :
                new ObjectParameter("month_to_add", typeof(int));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var stageParameter = stage != null ?
                new ObjectParameter("stage", stage) :
                new ObjectParameter("stage", typeof(string));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var maturityDateParameter = maturityDate.HasValue ?
                new ObjectParameter("MaturityDate", maturityDate) :
                new ObjectParameter("MaturityDate", typeof(System.DateTime));
    
            var basePDParameter = basePD.HasValue ?
                new ObjectParameter("BasePD", basePD) :
                new ObjectParameter("BasePD", typeof(double));
    
            var positivePDBestParameter = positivePDBest.HasValue ?
                new ObjectParameter("PositivePDBest", positivePDBest) :
                new ObjectParameter("PositivePDBest", typeof(double));
    
            var negativePDWorstParameter = negativePDWorst.HasValue ?
                new ObjectParameter("NegativePDWorst", negativePDWorst) :
                new ObjectParameter("NegativePDWorst", typeof(double));
    
            var lGDDefaultParameter = lGDDefault.HasValue ?
                new ObjectParameter("LGDDefault", lGDDefault) :
                new ObjectParameter("LGDDefault", typeof(double));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ecl_Calculation", totalPaymentsParameter, year_valueParameter, pfParameter, eAD_TotalParameter, eAD_dataParameter, int_rateParameter, eIRParameter, month_to_addParameter, facilityIDParameter, stageParameter, assessmentDateParameter, maturityDateParameter, basePDParameter, positivePDBestParameter, negativePDWorstParameter, lGDDefaultParameter, userParameter);
        }
    
        public virtual int emptyTable(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("emptyTable", userParameter);
        }
    
        public virtual int setLGD(string segment, Nullable<double> econLGD, string user)
        {
            var segmentParameter = segment != null ?
                new ObjectParameter("segment", segment) :
                new ObjectParameter("segment", typeof(string));
    
            var econLGDParameter = econLGD.HasValue ?
                new ObjectParameter("econLGD", econLGD) :
                new ObjectParameter("econLGD", typeof(double));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setLGD", segmentParameter, econLGDParameter, userParameter);
        }
    }
}
